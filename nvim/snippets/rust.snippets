snippet print
	println!(\"${1}\");
snippet eprint
	eprintln!(\"${1}\");
snippet fn
	fn ${1:name}(${3})${4} {
		${0:${VISUAL}}
	}
snippet fnp
	pub fn ${1:name}(${3})${4} {
		${0:${VISUAL}}
	}
snippet fna
	async fn ${1:name}(${3})${4} {
		${0:${VISUAL}}
	}
snippet fnpa
	pub async fn ${1:name}(${3})${4} {
		${0:${VISUAL}}
	}
snippet for
	for ${1:needle} in ${2:haystack} {
		${0:${VISUAL}}
	}
snippet match
	match ${1} {
		${2} => ${3}
	}
snippet opt "Option<T>"
	Option<${1:i32}>
snippet res "Result<T, E>"
	Result<${1:&str}, ${2:()}>
snippet fmt
	#[rustfmt::skip]
snippet cfg
	#[cfg(${1:test})]
snippet der
	#[derive(${1:Debug})]
snippet templ
	#[derive(Template)]
	#[template(path = "${1:name.html}")]
snippet serde
	#[derive(Serialize, Deserialize)]
snippet serde-rename
	#[serde(rename_all = "${1:kebab-case}")]
snippet box
	Box::new(${0:${VISUAL}})
snippet rc
	Rc::new(${0:${VISUAL}})
snippet allow
	#![allow(${1:unused})]
snippet deny
	#![deny(${1:unsafe_code})]
snippet derive
	#[derive(${1})]
snippet bench
	#[bench]
	fn ${1:name}(b: &mut test::Bencher) {
	    ${2:b.iter(|| ${3:/* benchmark code */})}
	}
snippet enum
	#[derive(Debug)]
	enum ${1:Name} {
		${2:Variant1},
		${3:Variant2},
	}
snippet struct
	#[derive(Debug)]
	struct ${1:Name} {
		${2:field}: ${3:Type},
	}
snippet modtest
	#[cfg(test)]
	mod tests {
		use super::*;

		#[test]
		fn ${1:test_name}() {
			${0:${VISUAL}}
		}
	}
snippet test
	#[test]
	fn ${1:test_name}() {
		${0:${VISUAL}}
	}
